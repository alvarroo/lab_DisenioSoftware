from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, transpile
from qiskit_ibm_runtime import QiskitRuntimeService, SamplerV2 as Sampler
from qiskit_ibm_provider import IBMProvider
from qiskit.circuit.library.standard_gates import *
from qiskit.visualization import plot_histogram
from qiskit.quantum_info.operators import Operator
from math import pi
import numpy 
import time
from qiskit.visualization import plot_state_city 
from qiskit.visualization import plot_histogram
from qiskit.circuit.library import MCMT

start_time = time.time()
qubits = #QUBITS#
qreg = QuantumRegister(qubits, 'q') 
creg = ClassicalRegister(qubits, 'c')
circuit = QuantumCircuit(qreg, creg)
  
#Input qubits initialization:
#INPUT_INITIALIZATION#
#Output qubits MUST BE set to 0
#OUTPUT_INITIALIZATION#

#CIRCUIT#

#MEASURES#

end_time = time.time()
assembly_time = end_time - start_time
print("ORIGINAL CIRCUIT:")
print(circuit)
print("**********************")
service = QiskitRuntimeService()
backend = service.least_busy(operational=True, simulator=False)
sampler = Sampler(mode=backend)
start_time = time.time()
transpiled_circuit = transpile(circuit, backend)
end_time = time.time()
transpilation_time = end_time - start_time
print("TRANSPILED CIRCUIT:")
#print(transpiled_circuit)
print("**********************")
print(f"Assembly time: {assembly_time:.4f} seconds")
print(f"Transpilation time: {transpilation_time:.4f} seconds")
print("Gates (original):", sum(circuit.count_ops().values()))
print("Gates (transpiled):", sum(transpiled_circuit.count_ops().values()))



